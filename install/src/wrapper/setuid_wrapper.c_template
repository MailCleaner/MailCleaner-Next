#include <stdlib.h>
#include <stdio.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>


/*
This is a setuid wrapper executable that will start/stop services that need root privileges
For security reasons, launched scripts will be hardcoded here.
*/

#define __SRCDIR __SRCDIR__

#define EXIM1 __SRCDIR"/etc/init.d/exim_stage1"
#define EXIM2 __SRCDIR"/etc/init.d/exim_stage2"
#define EXIM4 __SRCDIR"/etc/init.d/exim_stage4"
#define MYSQL_SLAVE __SRCDIR"/etc/init.d/mysql_slave"
#define MYSQL_MASTER __SRCDIR"/etc/init.d/mysql_master"
#define FIREWALL __SRCDIR"/etc/init.d/firewall"
#define DCC __SRCDIR"/etc/init.d/rcDCC"
#define APACHE __SRCDIR"/etc/init.d/apache"
#define START "start"
#define STOP "stop"

/*
Parameters:  int (service)
services are:
1: exim stage1 START
2: exim stage1 STOP
3: exim stage2 START
4: exim stage2 STOP
5: exim stage4 START
6: exim stage4 STOP
7: mysql slave START
8: mysql slave STOP
9: mysql master START
10: mysql master STOP
11: apache START
12: apache STOP
13: dcc START
14: dcc STOP
15: firewall START
16: firewall STOP
*/


int main(int argc, char *argv[], char *argp[]) {
	struct stat *exec_stat;
	int service = 0;
	char exec_path[strlen(__SRCDIR)+100];
	char exec_arg[20];

	if (argc < 2) {
		printf("BADARG");
                exit(0);
        }

	service = atoi(argv[1]);
	// we can do sprintf here because our buffers are big enough, just beware if you add a script path bigger !
	switch(service) {
	case 1:
		if ((! sprintf(exec_path, "%s", EXIM1)) || (! sprintf(exec_arg, "%s", START))) {
			printf("ERRSTRNCPY");
			exit(0);
		}
			
		break;
	case 2:
		if ((! sprintf(exec_path, "%s", EXIM1)) || (! sprintf(exec_arg, "%s", STOP))) {
                        printf("ERRSTRNCPY");
                        exit(0);
                }
		break;
	case 3:
                if ((! sprintf(exec_path, "%s", EXIM2)) || (! sprintf(exec_arg, "%s", START))) {
                        printf("ERRSTRNCPY");
                        exit(0);
                }

                break;
        case 4:
                if ((! sprintf(exec_path, "%s", EXIM2)) || (! sprintf(exec_arg, "%s", STOP))) {
                        printf("ERRSTRNCPY");
                        exit(0);
                }
                break;
	case 5:
                if ((! sprintf(exec_path, "%s", EXIM4)) || (! sprintf(exec_arg, "%s", START))) {
                        printf("ERRSTRNCPY");
                        exit(0);
                }

                break;
        case 6:
                if ((! sprintf(exec_path, "%s", EXIM4)) || (! sprintf(exec_arg, "%s", STOP))) {
                        printf("ERRSTRNCPY");
                        exit(0);
                }
                break;
	case 7:
                if ((! sprintf(exec_path, "%s", MYSQL_SLAVE)) || (! sprintf(exec_arg, "%s", START))) {
                        printf("ERRSTRNCPY");
                        exit(0);
                }
                break;
        case 8:
                if ((! sprintf(exec_path, "%s", MYSQL_SLAVE)) || (! sprintf(exec_arg, "%s", STOP))) {
                        printf("ERRSTRNCPY");
                        exit(0);
                }
                break;
	case 9:
                if ((! sprintf(exec_path, "%s", MYSQL_MASTER)) || (! sprintf(exec_arg, "%s", START))) {
                        printf("ERRSTRNCPY");
                        exit(0);
                }
                break;
        case 10:
                if ((! sprintf(exec_path, "%s", MYSQL_MASTER)) || (! sprintf(exec_arg, "%s", STOP))) {
                        printf("ERRSTRNCPY");
                        exit(0);
                }
                break;
	case 11:
		if ((! sprintf(exec_path, "%s", APACHE)) || (! sprintf(exec_arg, "%s", START))) {
                        printf("ERRSTRNCPY");
                        exit(0);
                }
		break;
	case 12:
		if ((! sprintf(exec_path, "%s", APACHE)) || (! sprintf(exec_arg, "%s", STOP))) {
                        printf("ERRSTRNCPY");
                        exit(0);
                }
		break;
	case 13:
                if ((! sprintf(exec_path, "%s", DCC)) || (! sprintf(exec_arg, "%s", START))) {
                        printf("ERRSTRNCPY");
                        exit(0);
                }
                break;
        case 14:
                if ((! sprintf(exec_path, "%s", DCC)) || (! sprintf(exec_arg, "%s", STOP))) {
                        printf("ERRSTRNCPY");
                        exit(0);
                }
                break;
	case 15:
                if ((! sprintf(exec_path, "%s", FIREWALL)) || (! sprintf(exec_arg, "%s", START))) {
                        printf("ERRSTRNCPY");
                        exit(0);
                }
                break;
	case 16:
                if ((! sprintf(exec_path, "%s", FIREWALL)) || (! sprintf(exec_arg, "%s", STOP))) {
                        printf("ERRSTRNCPY");
                        exit(0);
                }
                break;
	default:
		printf("BADARG");
		exit(0);
		break;
	}

	if (stat(exec_path, exec_stat)) {
		printf("CANNNOTSTAT");
		exit(0);
	}

	if (! S_ISREG(exec_stat->st_mode)) {	
		printf("NOTAFILE");
		exit(0);
	}

	// exec file seems ok.. do the job !
	if (!setuid(0)) {
		if (! execle(exec_path, exec_path, exec_arg, NULL, argp, NULL) != -1) {
			printf("CANNOTSYSTEM");
			printf("\n error: %s\n", strerror(errno));
			exit(0);
		} 
	}
	else {
		printf("CANNOTSETUID");
		exit(0);
	}

	exit(1);	

}
